"""empty message

Revision ID: b26491277741
Revises: 
Create Date: 2019-10-22 21:43:42.713696

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b26491277741'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cell',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('cell_type_id', sa.Integer(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('title', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['cell_type_id'], ['cell_type.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cell_type',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.UnicodeText(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('vendor', sa.UnicodeText(), nullable=False),
    sa.Column('vendor_batch', sa.UnicodeText(), nullable=False),
    sa.Column('electrolyte_id', sa.Integer(), nullable=False),
    sa.Column('positive_electrode_id', sa.Integer(), nullable=False),
    sa.Column('separator_id', sa.Integer(), nullable=False),
    sa.Column('negative_electrode_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['electrolyte_id'], ['electrolyte.id'], ),
    sa.ForeignKeyConstraint(['negative_electrode_id'], ['negative_electrode.id'], ),
    sa.ForeignKeyConstraint(['positive_electrode_id'], ['positive_electrode.id'], ),
    sa.ForeignKeyConstraint(['separator_id'], ['separator.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cycler_instrument',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=32), nullable=False),
    sa.Column('model', sa.String(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cycling',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('cell_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('temperature_K', sa.Float(), nullable=True),
    sa.Column('data_table_name', sa.String(length=32), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('raw_data__filename', sa.String(length=32), nullable=True),
    sa.Column('cycler_instrument_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['cell_id'], ['cell.id'], ),
    sa.ForeignKeyConstraint(['cycler_instrument_id'], ['cycler_instrument.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('electrode_component',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('component', sa.UnicodeText(), nullable=False),
    sa.Column('name', sa.UnicodeText(), nullable=False),
    sa.Column('smiles', sa.UnicodeText(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('electrolyte',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.UnicodeText(), nullable=False),
    sa.Column('electrolyte_concentration_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['electrolyte_concentration_id'], ['electrolyte_concentration.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('electrolyte_component',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('component', sa.UnicodeText(), nullable=False),
    sa.Column('name', sa.UnicodeText(), nullable=False),
    sa.Column('smiles', sa.UnicodeText(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('electrolyte_concentration',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('component_id', sa.Integer(), nullable=False),
    sa.Column('concentration', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['component_id'], ['electrolyte_component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('measurement',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('cell_id', sa.Integer(), nullable=False),
    sa.Column('measurement_type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['cell_id'], ['cell.id'], ),
    sa.ForeignKeyConstraint(['measurement_type_id'], ['measurement_type.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('measurement_type',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.UnicodeText(), nullable=False),
    sa.Column('table_name', sa.String(length=32), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('negative_electrode',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('cell_id', sa.Integer(), nullable=False),
    sa.Column('positive_electrode_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['cell_id'], ['cell.id'], ),
    sa.ForeignKeyConstraint(['positive_electrode_id'], ['negative_electrode_concentration.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('negative_electrode_concentration',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('component_id', sa.Integer(), nullable=False),
    sa.Column('concentration', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['component_id'], ['electrode_component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('positive_electrode',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('cell_id', sa.Integer(), nullable=False),
    sa.Column('positive_electrode_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['cell_id'], ['cell.id'], ),
    sa.ForeignKeyConstraint(['positive_electrode_id'], ['positive_electrode_concentration.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('positive_electrode_concentration',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('component_id', sa.Integer(), nullable=False),
    sa.Column('concentration', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['component_id'], ['electrode_component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('project',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.UnicodeText(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('description', sa.UnicodeText(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('separator',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('cell_id', sa.Integer(), nullable=False),
    sa.Column('separator_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['cell_id'], ['cell.id'], ),
    sa.ForeignKeyConstraint(['separator_id'], ['separator_concentration.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('separator_component',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('component', sa.UnicodeText(), nullable=False),
    sa.Column('name', sa.UnicodeText(), nullable=False),
    sa.Column('smiles', sa.UnicodeText(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('separator_concentration',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('component_id', sa.Integer(), nullable=False),
    sa.Column('concentration', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['component_id'], ['separator_component.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('virtual_project',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.UnicodeText(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('description', sa.UnicodeText(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('virtual_project_catalog',
    sa.Column('virtual_project_id', sa.Integer(), nullable=False),
    sa.Column('measurement_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['measurement_id'], ['measurement.id'], ),
    sa.ForeignKeyConstraint(['virtual_project_id'], ['virtual_project.id'], ),
    sa.PrimaryKeyConstraint('virtual_project_id', 'measurement_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('virtual_project_catalog')
    op.drop_table('virtual_project')
    op.drop_table('separator_concentration')
    op.drop_table('separator_component')
    op.drop_table('separator')
    op.drop_table('project')
    op.drop_table('positive_electrode_concentration')
    op.drop_table('positive_electrode')
    op.drop_table('negative_electrode_concentration')
    op.drop_table('negative_electrode')
    op.drop_table('measurement_type')
    op.drop_table('measurement')
    op.drop_table('electrolyte_concentration')
    op.drop_table('electrolyte_component')
    op.drop_table('electrolyte')
    op.drop_table('electrode_component')
    op.drop_table('cycling')
    op.drop_table('cycler_instrument')
    op.drop_table('cell_type')
    op.drop_table('cell')
    # ### end Alembic commands ###
